/*
 * This file is generated by jOOQ.
*/
package com.jivecoin.app.generated.tables;


import com.jivecoin.app.generated.DefaultSchema;
import com.jivecoin.app.generated.Indexes;
import com.jivecoin.app.generated.Keys;
import com.jivecoin.app.generated.tables.records.TxRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.6"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TxTable extends TableImpl<TxRecord> {

    private static final long serialVersionUID = -2112861900;

    /**
     * The reference instance of <code>tx</code>
     */
    public static final TxTable TX = new TxTable();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TxRecord> getRecordType() {
        return TxRecord.class;
    }

    /**
     * The column <code>tx.id</code>.
     */
    public final TableField<TxRecord, String> ID = createField("id", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>tx.block_hash</code>.
     */
    public final TableField<TxRecord, String> BLOCK_HASH = createField("block_hash", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>tx.hash</code>.
     */
    public final TableField<TxRecord, String> HASH = createField("hash", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>tx.type</code>.
     */
    public final TableField<TxRecord, String> TYPE = createField("type", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * Create a <code>tx</code> table reference
     */
    public TxTable() {
        this(DSL.name("tx"), null);
    }

    /**
     * Create an aliased <code>tx</code> table reference
     */
    public TxTable(String alias) {
        this(DSL.name(alias), TX);
    }

    /**
     * Create an aliased <code>tx</code> table reference
     */
    public TxTable(Name alias) {
        this(alias, TX);
    }

    private TxTable(Name alias, Table<TxRecord> aliased) {
        this(alias, aliased, null);
    }

    private TxTable(Name alias, Table<TxRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.SQLITE_AUTOINDEX_TX_1, Indexes.SQLITE_AUTOINDEX_TX_2);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<TxRecord> getPrimaryKey() {
        return Keys.PK_TX;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<TxRecord>> getKeys() {
        return Arrays.<UniqueKey<TxRecord>>asList(Keys.PK_TX);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<TxRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<TxRecord, ?>>asList(Keys.FK_TX_BLOCK_1);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TxTable as(String alias) {
        return new TxTable(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TxTable as(Name alias) {
        return new TxTable(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TxTable rename(String name) {
        return new TxTable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TxTable rename(Name name) {
        return new TxTable(name, null);
    }
}
