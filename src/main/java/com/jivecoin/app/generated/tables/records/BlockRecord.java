/*
 * This file is generated by jOOQ.
*/
package com.jivecoin.app.generated.tables.records;


import com.jivecoin.app.generated.tables.BlockTable;

import java.math.BigDecimal;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record5;
import org.jooq.Row5;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.6"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BlockRecord extends UpdatableRecordImpl<BlockRecord> implements Record5<Integer, String, String, BigDecimal, Integer> {

    private static final long serialVersionUID = 1811712287;

    /**
     * Setter for <code>block.index</code>.
     */
    public void setIndex(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>block.index</code>.
     */
    public Integer getIndex() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>block.hash</code>.
     */
    public void setHash(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>block.hash</code>.
     */
    public String getHash() {
        return (String) get(1);
    }

    /**
     * Setter for <code>block.previous_hash</code>.
     */
    public void setPreviousHash(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>block.previous_hash</code>.
     */
    public String getPreviousHash() {
        return (String) get(2);
    }

    /**
     * Setter for <code>block.timestamp</code>.
     */
    public void setTimestamp(BigDecimal value) {
        set(3, value);
    }

    /**
     * Getter for <code>block.timestamp</code>.
     */
    public BigDecimal getTimestamp() {
        return (BigDecimal) get(3);
    }

    /**
     * Setter for <code>block.nonce</code>.
     */
    public void setNonce(Integer value) {
        set(4, value);
    }

    /**
     * Getter for <code>block.nonce</code>.
     */
    public Integer getNonce() {
        return (Integer) get(4);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record5 type implementation
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Row5<Integer, String, String, BigDecimal, Integer> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row5<Integer, String, String, BigDecimal, Integer> valuesRow() {
        return (Row5) super.valuesRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field1() {
        return BlockTable.BLOCK.INDEX;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field2() {
        return BlockTable.BLOCK.HASH;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field3() {
        return BlockTable.BLOCK.PREVIOUS_HASH;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<BigDecimal> field4() {
        return BlockTable.BLOCK.TIMESTAMP;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field5() {
        return BlockTable.BLOCK.NONCE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer component1() {
        return getIndex();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component2() {
        return getHash();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component3() {
        return getPreviousHash();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public BigDecimal component4() {
        return getTimestamp();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer component5() {
        return getNonce();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value1() {
        return getIndex();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value2() {
        return getHash();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value3() {
        return getPreviousHash();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public BigDecimal value4() {
        return getTimestamp();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value5() {
        return getNonce();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public BlockRecord value1(Integer value) {
        setIndex(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public BlockRecord value2(String value) {
        setHash(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public BlockRecord value3(String value) {
        setPreviousHash(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public BlockRecord value4(BigDecimal value) {
        setTimestamp(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public BlockRecord value5(Integer value) {
        setNonce(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public BlockRecord values(Integer value1, String value2, String value3, BigDecimal value4, Integer value5) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached BlockRecord
     */
    public BlockRecord() {
        super(BlockTable.BLOCK);
    }

    /**
     * Create a detached, initialised BlockRecord
     */
    public BlockRecord(Integer index, String hash, String previousHash, BigDecimal timestamp, Integer nonce) {
        super(BlockTable.BLOCK);

        set(0, index);
        set(1, hash);
        set(2, previousHash);
        set(3, timestamp);
        set(4, nonce);
    }
}
